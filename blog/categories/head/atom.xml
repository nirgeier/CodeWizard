<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Head | CodeWiward]]></title>
  <link href="http://nirgeier.github.io/CodeWizard/blog/categories/head/atom.xml" rel="self"/>
  <link href="http://nirgeier.github.io/CodeWizard/"/>
  <updated>2016-04-25T17:41:42+01:00</updated>
  <id>http://nirgeier.github.io/CodeWizard/</id>
  <author>
    <name><![CDATA[Nir Geier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git - What Is `HEAD`]]></title>
    <link href="http://nirgeier.github.io/CodeWizard/blog/2016/04/25/git-what-is-head/"/>
    <updated>2016-04-25T06:26:56+01:00</updated>
    <id>http://nirgeier.github.io/CodeWizard/blog/2016/04/25/git-what-is-head</id>
    <content type="html"><![CDATA[<h2 id="what-is-this-head-in-git">What is this HEAD in Git?</h2>

<!--more-->

<p>Before we answer let me explain what <code>HEAD</code> is in git.</p>

<p><code>HEAD</code> is simply a reference to the current commit (latest) which the current branch is pointing to right now.<br />
There can only be a single <code>HEAD</code> at any given time. (excluding <code>git worktree</code>)</p>

<p>The content of <code>HEAD</code> is stored inside <code>.git/HEAD</code> and it contains the 40 bytes SHA-1 of the current commit.</p>

<hr />
<p><strong><em><code>detached HEAD</code></em></strong>
===
If you are not on the latest commit - meaning that <code>HEAD</code> is pointing to a prior commit in history its called <strong><em><code>detached HEAD</code></em></strong>.</p>

<p><a href="http://i.stack.imgur.com/U0l3s.png"><img src="http://i.stack.imgur.com/U0l3s.png" alt="enter image description here" /></a></p>

<h1 id="how-to-recover-from-a-detached-head">How to recover from a detached HEAD:</h1>

<h3 id="git-checkouthttpsgit-scmcomdocsgit-checkout"><a href="https://git-scm.com/docs/git-checkout"><code>git checkout</code></a></h3>

<pre><code>git checkout &lt;commit_id&gt;
git checkout -b &lt;new branch&gt; &lt;commit_id&gt;
git checkout HEAD~X // x is the number of commits t go back
</code></pre>

<p>This will checkout new branch pointing to the desired commit.<br />
This command will checkout to a given commit.   <br />
At this point you can create a branch and start to work from this point on.</p>

<pre><code># Checkout a given commit. 
# Doing so will result in a `detached HEAD` which mean that the `HEAD`
# is not pointing to the latest so you will need to checkout branch
#in order to be able to update the code.
git checkout &lt;commit-id&gt;

# create a new branch forked to the given commit
git checkout -b &lt;branch name&gt;
</code></pre>

<hr />

<h3 id="git-refloghttpsgit-scmcomdocsgit-reflog"><a href="https://git-scm.com/docs/git-reflog"><code>git reflog</code></a></h3>
<p>You can always use the <code>reflog</code> as well.<br />
<code>git reflog </code> will display any change which updated the <code>HEAD</code> and checking out the desired reflog entry will set the <code>HEAD</code> back to this commit.</p>

<p><strong>Every time the HEAD is modified there will be a new entry in the <code>reflog</code></strong></p>

<pre><code>git reflog
git checkout HEAD@{...}
</code></pre>

<p>This will get you back to your desired commit</p>

<p><a href="http://i.stack.imgur.com/atW9w.png"><img src="http://i.stack.imgur.com/atW9w.png" alt="enter image description here" /></a></p>

<hr />

<h3 id="git-reset-head---hard-commitidhttpsgit-scmcomdocsgit-reset"><strong><em><a href="https://git-scm.com/docs/git-reset"><code>git reset HEAD --hard &lt;commit_id&gt;</code></a></em></strong></h3>
<p>“Move” your head back to the desired commit.</p>

<!-- language: lang-sh -->

<pre><code># This will destroy any local modifications.
# Don't do it if you have uncommitted work you want to keep.
git reset --hard 0d1d7fc32

# Alternatively, if there's work to keep:
git stash
git reset --hard 0d1d7fc32
git stash pop
# This saves the modifications, then reapplies that patch after resetting.
# You could get merge conflicts, if you've modified things which were
# changed since the commit you reset to.
</code></pre>

<ul>
  <li>Note: (<a href="https://github.com/git/git/blob/master/Documentation/RelNotes/2.7.0.txt">Since Git 2.7</a>)<br />
you can also use the <code>git rebase --no-autostash</code> as well.</li>
</ul>

<hr />

<p>This schema illustrate which command does what.<br />
As you can see there <code>reset &amp;&amp; checkout</code> modify the <code>HEAD</code>.</p>

<p><a href="http://i.stack.imgur.com/NuThL.png"><img src="http://i.stack.imgur.com/NuThL.png" alt="enter image description here" /></a></p>

]]></content>
  </entry>
  
</feed>
